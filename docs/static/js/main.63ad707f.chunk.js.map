{"version":3,"sources":["hoc/withClass.js","Car/Car.js","ErrorBoundary/ErrorBoundary.js","Counter2/Counter2.js","Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["withClass","Component","className","props","state","this","Fragment","name","price","year","onClick","onDelete","React","ErrorBoundary","hasError","error","info","setState","style","border","padding","color","children","fontSize","ClickedContext","Consumer","clicked","Counter","counterUp","counter","counterDown","prevState","width","Counter2","createContext","App","showCarsHandler","showCars","changeTitleHandler","event","title","target","value","deleteCarHandler","index","cars","concat","splice","inputRef","createRef","current","focus","map","car","key","bind","Provider","ref","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63ad707f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst withClass = (Component, className) => {\r\n  return props => {\r\n    return (\r\n      <li className={className}>\r\n        <Component {...props} />\r\n      </li>\r\n    );\r\n  };\r\n};\r\n\r\nexport default withClass;\r\n","import React from \"react\";\r\nimport withClass from \"../hoc/withClass\";\r\nimport \"./Car.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Car extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { props } = this;\r\n    return (\r\n      <React.Fragment>\r\n        <h3 className=\"car__title\">{props.name}</h3>\r\n        <p>\r\n          Car price: <strong>{props.price}$</strong>\r\n        </p>\r\n        <p>\r\n          Car year: <strong>{props.year}</strong>\r\n        </p>\r\n        <button className=\"close\" onClick={props.onDelete}></button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nCar.propTypes = {\r\n  name: PropTypes.string,\r\n  price: PropTypes.number,\r\n  year: PropTypes.number,\r\n  onDelete: PropTypes.func\r\n};\r\n\r\nexport default withClass(Car, \"car\");\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div style={{ border: \"1px solid red\", padding: \"20px\", color: \"red\" }}>\r\n          Error, ssore\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { ClickedContext } from \"../App\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <h2 style={{ fontSize: \"12px\" }}>\r\n        Counter:{\" \"}\r\n        <strong>\r\n          <ClickedContext.Consumer>\r\n            {clicked => {\r\n              return clicked ? \"Clicked\" : null;\r\n            }}\r\n          </ClickedContext.Consumer>\r\n        </strong>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Counter2 from \"../Counter2/Counter2\";\r\nimport \"./Counter.css\";\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counter: 0\r\n    };\r\n  }\r\n\r\n  counterUp = () => {\r\n    this.setState({\r\n      counter: this.state.counter + 1\r\n    });\r\n  };\r\n\r\n  counterDown = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        counter: prevState.counter - 1\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <h2>\r\n          Counter: <strong>{this.state.counter}</strong>\r\n        </h2>\r\n        <div className=\"buttons\">\r\n          <button\r\n            className=\"def-btn\"\r\n            style={{ width: \"30px\" }}\r\n            onClick={this.counterUp}\r\n          >\r\n            +\r\n          </button>\r\n          <button\r\n            className=\"def-btn\"\r\n            style={{ width: \"30px\" }}\r\n            onClick={this.counterDown}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n        <Counter2 />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport Car from \"./Car/Car.js\";\nimport \"./App.css\";\nimport ErrorBoundary from \"./ErrorBoundary/ErrorBoundary\";\nimport Counter from \"./Counter/Counter.js\";\n\nexport const ClickedContext = React.createContext(false);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputRef = React.createRef();\n    this.state = {\n      cars: [\n        { name: \"Ford\", price: 10000, year: 2014 },\n        { name: \"Mazda\", price: 11000, year: 2017 },\n        { name: \"BMW\", price: 8600, year: 2018 },\n        { name: \"Audi\", price: 15300, year: 2015 },\n        { name: \"Mercedes\", price: 14500, year: 2019 },\n        { name: \"Lada\", price: 150, year: 1990 }\n      ],\n      showCars: true,\n      clicked: false,\n      title: \"Epic Cars Shop\"\n    };\n  }\n\n  showCarsHandler = () => {\n    this.setState({ showCars: !this.state.showCars });\n  };\n\n  changeTitleHandler = event => {\n    let title = event.target.value;\n    this.setState({ title });\n  };\n\n  deleteCarHandler = index => {\n    const cars = this.state.cars.concat();\n    cars.splice(index, 1);\n    this.setState({ cars });\n  };\n\n  componentDidMount() {\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    let cars = null;\n\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n        return (\n          <ErrorBoundary key={index}>\n            <Car\n              name={car.name}\n              price={car.price}\n              year={car.year}\n              onDelete={this.deleteCarHandler.bind(this, index)}\n            />\n          </ErrorBoundary>\n        );\n      });\n    }\n\n    return (\n      <div className=\"header\">\n        <h1 className=\"header__title\">{this.state.title}</h1>\n        <ClickedContext.Provider value={this.state.clicked}>\n          <Counter />\n        </ClickedContext.Provider>\n        <button\n          className=\"def-btn\"\n          onClick={() => this.setState({ clicked: true })}\n        >\n          Change clicked\n        </button>\n        <div className=\"header__input-wrapper\">\n          <input\n            ref={this.inputRef}\n            value={this.state.title}\n            onChange={this.changeTitleHandler}\n            className=\"header__input\"\n          ></input>\n        </div>\n        <button className=\"header__button\" onClick={this.showCarsHandler}>\n          Toggle cars\n        </button>\n        <ol className=\"cars-list\">{cars}</ol>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}